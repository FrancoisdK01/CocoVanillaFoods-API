// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20230722185717_newpayments")]
    partial class newpayments
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("API.Model.Blacklist", b =>
                {
                    b.Property<int>("BlacklistID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlacklistID"), 1L, 1);

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Reason")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("BlacklistID");

                    b.ToTable("Blacklists");
                });

            modelBuilder.Entity("API.Model.Booking", b =>
                {
                    b.Property<int>("BookingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingID"), 1L, 1);

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.HasKey("BookingID");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EventId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("API.Model.BookingPayment", b =>
                {
                    b.Property<int>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentID"), 1L, 1);

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<double>("PaymentAmount")
                        .HasColumnType("float");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PaymentID");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.ToTable("BookingPayments");
                });

            modelBuilder.Entity("API.Model.Customer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date_Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date_of_last_update")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("First_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("ID_Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Last_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("API.Model.Discount", b =>
                {
                    b.Property<int>("DiscountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiscountID"), 1L, 1);

                    b.Property<string>("DiscountCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DiscountDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("DiscountPercentage")
                        .HasColumnType("float");

                    b.HasKey("DiscountID");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("API.Model.EarlyBird", b =>
                {
                    b.Property<int>("EarlyBirdID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EarlyBirdID"), 1L, 1);

                    b.Property<int>("Limit")
                        .HasColumnType("int");

                    b.Property<int>("Percentage")
                        .HasColumnType("int");

                    b.HasKey("EarlyBirdID");

                    b.ToTable("EarlyBird");
                });

            modelBuilder.Entity("API.Model.Employee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("First_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Hire_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("ID_Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Last_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SuperUserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SuperUserID");

                    b.HasIndex("UserId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("API.Model.Event", b =>
                {
                    b.Property<int>("EventID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventID"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("EarlyBirdID")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("EventPrice")
                        .HasColumnType("int");

                    b.Property<int?>("EventTypeID")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Tickets_Available")
                        .HasColumnType("int");

                    b.Property<int>("Tickets_Sold")
                        .HasColumnType("int");

                    b.HasKey("EventID");

                    b.HasIndex("EarlyBirdID");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EventTypeID");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("API.Model.EventLocation", b =>
                {
                    b.Property<int>("EventLocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventLocationID"), 1L, 1);

                    b.Property<DateTime>("Date_of_last_update")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EventID")
                        .HasColumnType("int");

                    b.Property<string>("Postal_Code")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("Street_Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SuperUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("EventLocationID");

                    b.HasIndex("EventID");

                    b.HasIndex("SuperUserId");

                    b.ToTable("EventLocations");
                });

            modelBuilder.Entity("API.Model.EventPayments", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"), 1L, 1);

                    b.Property<int>("amount")
                        .HasColumnType("int");

                    b.Property<string>("cell_number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email_address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("item_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("merchant_id")
                        .HasColumnType("int");

                    b.Property<string>("merchant_key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("signature")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentId");

                    b.ToTable("EventsPayments");
                });

            modelBuilder.Entity("API.Model.EventPrice", b =>
                {
                    b.Property<int>("EventPriceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventPriceID"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EventID")
                        .HasColumnType("int");

                    b.HasKey("EventPriceID");

                    b.HasIndex("EventID");

                    b.ToTable("EventPrices");
                });

            modelBuilder.Entity("API.Model.EventReview", b =>
                {
                    b.Property<int>("EventReviewID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventReviewID"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CustomerID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("Review_Date")
                        .HasColumnType("datetime2");

                    b.HasKey("EventReviewID");

                    b.HasIndex("CustomerID");

                    b.ToTable("EventReviews");
                });

            modelBuilder.Entity("API.Model.EventType", b =>
                {
                    b.Property<int>("EventTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventTypeID"), 1L, 1);

                    b.Property<string>("EventDescription")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("EventTypeName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("EventTypeID");

                    b.ToTable("EventTypes");
                });

            modelBuilder.Entity("API.Model.FAQ", b =>
                {
                    b.Property<int>("FAQID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FAQID"), 1L, 1);

                    b.Property<string>("Answer")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Question")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("FAQID");

                    b.ToTable("FAQs");
                });

            modelBuilder.Entity("API.Model.Inventory", b =>
                {
                    b.Property<int>("InventoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InventoryID"), 1L, 1);

                    b.Property<int>("QuantityOnHand")
                        .HasColumnType("int");

                    b.Property<int>("StockLimit")
                        .HasColumnType("int");

                    b.Property<int?>("WineID")
                        .HasColumnType("int");

                    b.HasKey("InventoryID");

                    b.HasIndex("WineID");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("API.Model.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderID"), 1L, 1);

                    b.Property<string>("CustomerID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("OrderStatusID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Order_Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("ShippingID")
                        .HasColumnType("int");

                    b.HasKey("OrderID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("OrderStatusID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("API.Model.OrderItem", b =>
                {
                    b.Property<int>("OrderItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemID"), 1L, 1);

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("WineID")
                        .HasColumnType("int");

                    b.HasKey("OrderItemID");

                    b.HasIndex("OrderID");

                    b.HasIndex("WineID");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("API.Model.OrderPayment", b =>
                {
                    b.Property<int>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentID"), 1L, 1);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("AmountID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.HasKey("PaymentID");

                    b.HasIndex("OrderID")
                        .IsUnique();

                    b.ToTable("OrderPayments");
                });

            modelBuilder.Entity("API.Model.OrderStatus", b =>
                {
                    b.Property<int>("OrderStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderStatusID"), 1L, 1);

                    b.Property<string>("OrderStatusName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderStatusID");

                    b.ToTable("OrderStatus");
                });

            modelBuilder.Entity("API.Model.Province", b =>
                {
                    b.Property<int>("ProvinceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProvinceID"), 1L, 1);

                    b.Property<DateTime>("Date_of_last_update")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ProvinceID");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("API.Model.Refund", b =>
                {
                    b.Property<int>("RefundID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefundID"), 1L, 1);

                    b.Property<DateTime>("DateIssued")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderItemID")
                        .HasColumnType("int");

                    b.Property<int>("QuantityRefunded")
                        .HasColumnType("int");

                    b.Property<int>("RefundReasonID")
                        .HasColumnType("int");

                    b.Property<int>("RefundResponseID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ResolvedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RefundID");

                    b.HasIndex("OrderItemID");

                    b.HasIndex("RefundReasonID");

                    b.HasIndex("RefundResponseID");

                    b.ToTable("Refunds");
                });

            modelBuilder.Entity("API.Model.RefundReason", b =>
                {
                    b.Property<int>("RefundReasonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefundReasonID"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("RefundTypeID")
                        .HasColumnType("int");

                    b.HasKey("RefundReasonID");

                    b.HasIndex("RefundTypeID");

                    b.ToTable("RefundReasons");
                });

            modelBuilder.Entity("API.Model.RefundResponse", b =>
                {
                    b.Property<int>("RefundResponseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefundResponseID"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ResponseValue")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.HasKey("RefundResponseID");

                    b.ToTable("RefundResponses");
                });

            modelBuilder.Entity("API.Model.RefundType", b =>
                {
                    b.Property<int>("RefundTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefundTypeID"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("RefundTypeID");

                    b.ToTable("RefundTypes");
                });

            modelBuilder.Entity("API.Model.ShippingDetails", b =>
                {
                    b.Property<int>("ShippingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShippingID"), 1L, 1);

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ShippingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TrackingNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ShippingID");

                    b.HasIndex("OrderID")
                        .IsUnique();

                    b.ToTable("ShippingDetails");
                });

            modelBuilder.Entity("API.Model.StockTake", b =>
                {
                    b.Property<int>("StockTakeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockTakeID"), 1L, 1);

                    b.Property<DateTime>("StockTake_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("StockTake_Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("StockTakeID");

                    b.ToTable("StockTakes");
                });

            modelBuilder.Entity("API.Model.StockTake_Item", b =>
                {
                    b.Property<int>("StockTake_ItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockTake_ItemID"), 1L, 1);

                    b.Property<int>("InventoryID")
                        .HasColumnType("int");

                    b.Property<int>("QuantityCounted")
                        .HasColumnType("int");

                    b.Property<int>("StockTakeID")
                        .HasColumnType("int");

                    b.HasKey("StockTake_ItemID");

                    b.HasIndex("InventoryID");

                    b.HasIndex("StockTakeID");

                    b.ToTable("StockTakeItems");
                });

            modelBuilder.Entity("API.Model.SuperUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("First_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Hire_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("ID_Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Last_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserID");

                    b.ToTable("SuperUser");
                });

            modelBuilder.Entity("API.Model.Supplier", b =>
                {
                    b.Property<int>("SupplierID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierID"), 1L, 1);

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SupplierID");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("API.Model.SupplierOrder", b =>
                {
                    b.Property<int>("SupplierOrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierOrderID"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity_Ordered")
                        .HasColumnType("int");

                    b.Property<int>("SupplierID")
                        .HasColumnType("int");

                    b.Property<int>("WineID")
                        .HasColumnType("int");

                    b.HasKey("SupplierOrderID");

                    b.HasIndex("SupplierID");

                    b.HasIndex("WineID");

                    b.ToTable("SupplierOrders");
                });

            modelBuilder.Entity("API.Model.SupplierPayment", b =>
                {
                    b.Property<int>("SupplierPaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierPaymentID"), 1L, 1);

                    b.Property<double>("AmountPaid")
                        .HasColumnType("float");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("SupplierOrderID")
                        .HasColumnType("int");

                    b.HasKey("SupplierPaymentID");

                    b.HasIndex("SupplierOrderID");

                    b.ToTable("SupplierPayments");
                });

            modelBuilder.Entity("API.Model.SystemPrivilege", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Privilege_Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SystemPrivileges");
                });

            modelBuilder.Entity("API.Model.Ticket", b =>
                {
                    b.Property<int>("TicketID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketID"), 1L, 1);

                    b.Property<int?>("BookingID")
                        .HasColumnType("int");

                    b.Property<string>("CustomerEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EventID")
                        .HasColumnType("int");

                    b.Property<string>("PaymentID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TicketID");

                    b.HasIndex("BookingID");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("API.Model.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("API.Model.Varietal", b =>
                {
                    b.Property<int>("VarietalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VarietalID"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("VarietalID");

                    b.ToTable("Varietals");
                });

            modelBuilder.Entity("API.Model.VAT", b =>
                {
                    b.Property<int>("VATID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VATID"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("Percentage")
                        .HasColumnType("float");

                    b.HasKey("VATID");

                    b.ToTable("VATs");
                });

            modelBuilder.Entity("API.Model.Wine", b =>
                {
                    b.Property<int>("WineID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WineID"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RestockLimit")
                        .HasColumnType("int");

                    b.Property<int>("VarietalID")
                        .HasColumnType("int");

                    b.Property<string>("Vintage")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("WinePrice")
                        .HasColumnType("float");

                    b.Property<string>("WineTastingNote")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("WineTypeID")
                        .HasColumnType("int");

                    b.HasKey("WineID");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("VarietalID");

                    b.HasIndex("WineTypeID");

                    b.ToTable("Wines");
                });

            modelBuilder.Entity("API.Model.WineType", b =>
                {
                    b.Property<int>("WineTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WineTypeID"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("WineTypeID");

                    b.ToTable("WineTypes");
                });

            modelBuilder.Entity("API.Model.Wishlist", b =>
                {
                    b.Property<int>("WishlistID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WishlistID"), 1L, 1);

                    b.Property<string>("CustomerID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("WishlistID");

                    b.HasIndex("CustomerID")
                        .IsUnique()
                        .HasFilter("[CustomerID] IS NOT NULL");

                    b.ToTable("Wishlists");
                });

            modelBuilder.Entity("API.Model.WishlistItem", b =>
                {
                    b.Property<int>("WishlistItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WishlistItemID"), 1L, 1);

                    b.Property<int>("WineID")
                        .HasColumnType("int");

                    b.Property<int>("WishlistID")
                        .HasColumnType("int");

                    b.HasKey("WishlistItemID");

                    b.HasIndex("WineID");

                    b.HasIndex("WishlistID");

                    b.ToTable("WishlistItems");
                });

            modelBuilder.Entity("API.Model.WriteOff", b =>
                {
                    b.Property<int>("WriteOffID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WriteOffID"), 1L, 1);

                    b.Property<string>("EmployeeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("WriteOff_Date")
                        .HasColumnType("datetime2");

                    b.HasKey("WriteOffID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("WriteOffs");
                });

            modelBuilder.Entity("API.Model.WriteOff_Reason", b =>
                {
                    b.Property<int>("WriteOff_ReasonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WriteOff_ReasonID"), 1L, 1);

                    b.Property<DateTime>("Date_of_last_update")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("WriteOff_ReasonID");

                    b.ToTable("WriteOffReasons");
                });

            modelBuilder.Entity("API.Model.WriteOffItem", b =>
                {
                    b.Property<int>("WriteOffItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WriteOffItemID"), 1L, 1);

                    b.Property<int>("WineID")
                        .HasColumnType("int");

                    b.Property<int>("WriteOffID")
                        .HasColumnType("int");

                    b.Property<int>("WriteOffReasonID")
                        .HasColumnType("int");

                    b.Property<int>("WriteOff_Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("WriteOff_ReasonID")
                        .HasColumnType("int");

                    b.HasKey("WriteOffItemID");

                    b.HasIndex("WineID");

                    b.HasIndex("WriteOffID");

                    b.HasIndex("WriteOff_ReasonID");

                    b.ToTable("WriteOffItems");
                });

            modelBuilder.Entity("API.Model.Booking", b =>
                {
                    b.HasOne("API.Model.Customer", "Customer")
                        .WithMany("Bookings")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Model.Event", "Event")
                        .WithMany("Bookings")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("API.Model.BookingPayment", b =>
                {
                    b.HasOne("API.Model.Booking", "Booking")
                        .WithOne("BookingPayment")
                        .HasForeignKey("API.Model.BookingPayment", "BookingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("API.Model.Customer", b =>
                {
                    b.HasOne("API.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Model.Employee", b =>
                {
                    b.HasOne("API.Model.SuperUser", "SuperUser")
                        .WithMany("Employees")
                        .HasForeignKey("SuperUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SuperUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Model.Event", b =>
                {
                    b.HasOne("API.Model.EarlyBird", "EarlyBird")
                        .WithMany("Events")
                        .HasForeignKey("EarlyBirdID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Model.Employee", null)
                        .WithMany("Events")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("API.Model.EventType", null)
                        .WithMany("Events")
                        .HasForeignKey("EventTypeID");

                    b.Navigation("EarlyBird");
                });

            modelBuilder.Entity("API.Model.EventLocation", b =>
                {
                    b.HasOne("API.Model.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventID");

                    b.HasOne("API.Model.SuperUser", null)
                        .WithMany("EventLocations")
                        .HasForeignKey("SuperUserId");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("API.Model.EventPrice", b =>
                {
                    b.HasOne("API.Model.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventID");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("API.Model.EventReview", b =>
                {
                    b.HasOne("API.Model.Customer", "Customer")
                        .WithMany("EventReviews")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("API.Model.Inventory", b =>
                {
                    b.HasOne("API.Model.Wine", "Wine")
                        .WithMany("Inventories")
                        .HasForeignKey("WineID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Wine");
                });

            modelBuilder.Entity("API.Model.Order", b =>
                {
                    b.HasOne("API.Model.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Model.OrderStatus", "OrderStatus")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("OrderStatus");
                });

            modelBuilder.Entity("API.Model.OrderItem", b =>
                {
                    b.HasOne("API.Model.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Model.Wine", "Wine")
                        .WithMany("OrderItems")
                        .HasForeignKey("WineID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Wine");
                });

            modelBuilder.Entity("API.Model.OrderPayment", b =>
                {
                    b.HasOne("API.Model.Order", "Order")
                        .WithOne("OrderPayment")
                        .HasForeignKey("API.Model.OrderPayment", "OrderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("API.Model.Refund", b =>
                {
                    b.HasOne("API.Model.OrderItem", "OrderItem")
                        .WithMany("Refunds")
                        .HasForeignKey("OrderItemID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Model.RefundReason", "RefundReason")
                        .WithMany("Refunds")
                        .HasForeignKey("RefundReasonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Model.RefundResponse", "RefundResponse")
                        .WithMany("Refunds")
                        .HasForeignKey("RefundResponseID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OrderItem");

                    b.Navigation("RefundReason");

                    b.Navigation("RefundResponse");
                });

            modelBuilder.Entity("API.Model.RefundReason", b =>
                {
                    b.HasOne("API.Model.RefundType", "RefundType")
                        .WithMany("RefundReasons")
                        .HasForeignKey("RefundTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RefundType");
                });

            modelBuilder.Entity("API.Model.ShippingDetails", b =>
                {
                    b.HasOne("API.Model.Order", "Order")
                        .WithOne("ShippingDetails")
                        .HasForeignKey("API.Model.ShippingDetails", "OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("API.Model.StockTake_Item", b =>
                {
                    b.HasOne("API.Model.Inventory", "Inventory")
                        .WithMany("StockTake_Items")
                        .HasForeignKey("InventoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Model.StockTake", "StockTake")
                        .WithMany("StockTake_Items")
                        .HasForeignKey("StockTakeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("StockTake");
                });

            modelBuilder.Entity("API.Model.SuperUser", b =>
                {
                    b.HasOne("API.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Model.SupplierOrder", b =>
                {
                    b.HasOne("API.Model.Supplier", "Supplier")
                        .WithMany("SupplierOrders")
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Model.Wine", "Wine")
                        .WithMany("SupplierOrders")
                        .HasForeignKey("WineID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Supplier");

                    b.Navigation("Wine");
                });

            modelBuilder.Entity("API.Model.SupplierPayment", b =>
                {
                    b.HasOne("API.Model.SupplierOrder", "SupplierOrder")
                        .WithMany()
                        .HasForeignKey("SupplierOrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SupplierOrder");
                });

            modelBuilder.Entity("API.Model.Ticket", b =>
                {
                    b.HasOne("API.Model.Booking", null)
                        .WithMany("Tickets")
                        .HasForeignKey("BookingID");
                });

            modelBuilder.Entity("API.Model.Wine", b =>
                {
                    b.HasOne("API.Model.Employee", null)
                        .WithMany("Wines")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("API.Model.Varietal", "Varietal")
                        .WithMany("Wines")
                        .HasForeignKey("VarietalID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Model.WineType", "WineType")
                        .WithMany("Wines")
                        .HasForeignKey("WineTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Varietal");

                    b.Navigation("WineType");
                });

            modelBuilder.Entity("API.Model.Wishlist", b =>
                {
                    b.HasOne("API.Model.Customer", "Customer")
                        .WithOne("Wishlist")
                        .HasForeignKey("API.Model.Wishlist", "CustomerID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("API.Model.WishlistItem", b =>
                {
                    b.HasOne("API.Model.Wine", "Wine")
                        .WithMany("WishlistItems")
                        .HasForeignKey("WineID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Model.Wishlist", "Wishlist")
                        .WithMany("WishlistItems")
                        .HasForeignKey("WishlistID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wine");

                    b.Navigation("Wishlist");
                });

            modelBuilder.Entity("API.Model.WriteOff", b =>
                {
                    b.HasOne("API.Model.Employee", "Employee")
                        .WithMany("WriteOffs")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("API.Model.WriteOffItem", b =>
                {
                    b.HasOne("API.Model.Wine", "Wine")
                        .WithMany("WriteOffItems")
                        .HasForeignKey("WineID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Model.WriteOff", "WriteOff")
                        .WithMany("WriteOffItems")
                        .HasForeignKey("WriteOffID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Model.WriteOff_Reason", "WriteOff_Reason")
                        .WithMany()
                        .HasForeignKey("WriteOff_ReasonID");

                    b.Navigation("Wine");

                    b.Navigation("WriteOff");

                    b.Navigation("WriteOff_Reason");
                });

            modelBuilder.Entity("API.Model.Booking", b =>
                {
                    b.Navigation("BookingPayment");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("API.Model.Customer", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("EventReviews");

                    b.Navigation("Orders");

                    b.Navigation("Wishlist");
                });

            modelBuilder.Entity("API.Model.EarlyBird", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("API.Model.Employee", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Wines");

                    b.Navigation("WriteOffs");
                });

            modelBuilder.Entity("API.Model.Event", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("API.Model.EventType", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("API.Model.Inventory", b =>
                {
                    b.Navigation("StockTake_Items");
                });

            modelBuilder.Entity("API.Model.Order", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("OrderPayment");

                    b.Navigation("ShippingDetails");
                });

            modelBuilder.Entity("API.Model.OrderItem", b =>
                {
                    b.Navigation("Refunds");
                });

            modelBuilder.Entity("API.Model.OrderStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("API.Model.RefundReason", b =>
                {
                    b.Navigation("Refunds");
                });

            modelBuilder.Entity("API.Model.RefundResponse", b =>
                {
                    b.Navigation("Refunds");
                });

            modelBuilder.Entity("API.Model.RefundType", b =>
                {
                    b.Navigation("RefundReasons");
                });

            modelBuilder.Entity("API.Model.StockTake", b =>
                {
                    b.Navigation("StockTake_Items");
                });

            modelBuilder.Entity("API.Model.SuperUser", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("EventLocations");
                });

            modelBuilder.Entity("API.Model.Supplier", b =>
                {
                    b.Navigation("SupplierOrders");
                });

            modelBuilder.Entity("API.Model.Varietal", b =>
                {
                    b.Navigation("Wines");
                });

            modelBuilder.Entity("API.Model.Wine", b =>
                {
                    b.Navigation("Inventories");

                    b.Navigation("OrderItems");

                    b.Navigation("SupplierOrders");

                    b.Navigation("WishlistItems");

                    b.Navigation("WriteOffItems");
                });

            modelBuilder.Entity("API.Model.WineType", b =>
                {
                    b.Navigation("Wines");
                });

            modelBuilder.Entity("API.Model.Wishlist", b =>
                {
                    b.Navigation("WishlistItems");
                });

            modelBuilder.Entity("API.Model.WriteOff", b =>
                {
                    b.Navigation("WriteOffItems");
                });
#pragma warning restore 612, 618
        }
    }
}

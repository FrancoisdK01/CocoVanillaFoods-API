// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(MyDbContext))]
    partial class MyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("API.Model.AuditTrail", b =>
                {
                    b.Property<int>("AuditLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditLogId"), 1L, 1);

                    b.Property<string>("ButtonPressed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuditLogId");

                    b.ToTable("AuditTrails");
                });

            modelBuilder.Entity("API.Model.Blacklist", b =>
                {
                    b.Property<int>("BlacklistID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlacklistID"), 1L, 1);

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Reason")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("BlacklistID");

                    b.ToTable("Blacklists");
                });

            modelBuilder.Entity("API.Model.CartItem", b =>
                {
                    b.Property<int>("CartItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartItemID"), 1L, 1);

                    b.Property<int>("CartID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("WineID")
                        .HasColumnType("int");

                    b.HasKey("CartItemID");

                    b.HasIndex("CartID");

                    b.HasIndex("WineID");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("API.Model.Customer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date_Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date_of_last_update")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("First_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("ID_Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Last_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("API.Model.Discount", b =>
                {
                    b.Property<int>("DiscountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiscountID"), 1L, 1);

                    b.Property<string>("DiscountCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DiscountDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("DiscountPercentage")
                        .HasColumnType("float");

                    b.HasKey("DiscountID");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("API.Model.EarlyBird", b =>
                {
                    b.Property<int>("EarlyBirdID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EarlyBirdID"), 1L, 1);

                    b.Property<int>("Limit")
                        .HasColumnType("int");

                    b.Property<int>("Percentage")
                        .HasColumnType("int");

                    b.HasKey("EarlyBirdID");

                    b.ToTable("EarlyBird");
                });

            modelBuilder.Entity("API.Model.Employee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("First_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Hire_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("ID_Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Last_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SuperUserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SuperUserID");

                    b.HasIndex("UserId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("API.Model.Event", b =>
                {
                    b.Property<int>("EventID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventID"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("DisplayItem")
                        .HasColumnType("bit");

                    b.Property<int?>("EarlyBirdID")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EventTypeID")
                        .HasColumnType("int");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Tickets_Available")
                        .HasColumnType("int");

                    b.Property<int>("Tickets_Sold")
                        .HasColumnType("int");

                    b.HasKey("EventID");

                    b.HasIndex("EarlyBirdID");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EventTypeID");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("API.Model.EventPrice", b =>
                {
                    b.Property<int>("EventPriceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventPriceID"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EventID")
                        .HasColumnType("int");

                    b.HasKey("EventPriceID");

                    b.HasIndex("EventID");

                    b.ToTable("EventPrices");
                });

            modelBuilder.Entity("API.Model.EventType", b =>
                {
                    b.Property<int>("EventTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventTypeID"), 1L, 1);

                    b.Property<string>("EventTypeName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("EventTypeID");

                    b.ToTable("EventTypes");

                    b.HasData(
                        new
                        {
                            EventTypeID = 1,
                            EventTypeName = "Internal"
                        },
                        new
                        {
                            EventTypeID = 2,
                            EventTypeName = "External"
                        },
                        new
                        {
                            EventTypeID = 3,
                            EventTypeName = "Social"
                        },
                        new
                        {
                            EventTypeID = 4,
                            EventTypeName = "Corporate"
                        },
                        new
                        {
                            EventTypeID = 5,
                            EventTypeName = "Other"
                        });
                });

            modelBuilder.Entity("API.Model.FAQ", b =>
                {
                    b.Property<int>("FAQID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FAQID"), 1L, 1);

                    b.Property<string>("Answer")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Question")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("FAQID");

                    b.ToTable("FAQs");
                });

            modelBuilder.Entity("API.Model.HelpResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("pdfPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("videoPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("HelpResources");
                });

            modelBuilder.Entity("API.Model.Inventory", b =>
                {
                    b.Property<int>("InventoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InventoryID"), 1L, 1);

                    b.Property<int>("QuantityOnHand")
                        .HasColumnType("int");

                    b.Property<int>("StockLimit")
                        .HasColumnType("int");

                    b.Property<int>("VarietalID")
                        .HasColumnType("int");

                    b.Property<int>("WineID")
                        .HasColumnType("int");

                    b.Property<decimal>("WinePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("WineTypeID")
                        .HasColumnType("int");

                    b.HasKey("InventoryID");

                    b.HasIndex("VarietalID");

                    b.HasIndex("WineID");

                    b.HasIndex("WineTypeID");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("API.Model.MethodPrivilegeMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ControllerName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("MethodName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SystemPrivilegeId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SystemPrivilegeId");

                    b.ToTable("MethodPrivilegeMappings");
                });

            modelBuilder.Entity("API.Model.QrCode", b =>
                {
                    b.Property<int>("QrId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QrId"), 1L, 1);

                    b.Property<string>("QrCodeBase64")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TicketPurchaseId")
                        .HasColumnType("int");

                    b.HasKey("QrId");

                    b.HasIndex("TicketPurchaseId")
                        .IsUnique();

                    b.ToTable("QrCodes");
                });

            modelBuilder.Entity("API.Model.RefundItem", b =>
                {
                    b.Property<int>("RefundItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefundItemId"), 1L, 1);

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RefundRequestId")
                        .HasColumnType("int");

                    b.Property<int?>("RefundResponseID")
                        .HasColumnType("int");

                    b.Property<int>("ResponseID")
                        .HasColumnType("int");

                    b.Property<int>("WineOrderItemId")
                        .HasColumnType("int");

                    b.HasKey("RefundItemId");

                    b.HasIndex("RefundRequestId");

                    b.HasIndex("RefundResponseID");

                    b.HasIndex("WineOrderItemId");

                    b.ToTable("RefundItems");
                });

            modelBuilder.Entity("API.Model.RefundRequest", b =>
                {
                    b.Property<int>("RefundRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefundRequestId"), 1L, 1);

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WineOrderId")
                        .HasColumnType("int");

                    b.HasKey("RefundRequestId");

                    b.HasIndex("WineOrderId");

                    b.ToTable("RefundRequests");
                });

            modelBuilder.Entity("API.Model.RefundResponse", b =>
                {
                    b.Property<int>("RefundResponseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefundResponseID"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ResponseValue")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RefundResponseID");

                    b.ToTable("RefundResponses");

                    b.HasData(
                        new
                        {
                            RefundResponseID = 1,
                            Description = "In Progress",
                            ResponseValue = "InProgress"
                        },
                        new
                        {
                            RefundResponseID = 2,
                            Description = "Approved",
                            ResponseValue = "Approved"
                        },
                        new
                        {
                            RefundResponseID = 3,
                            Description = "Not Approved",
                            ResponseValue = "NotApproved"
                        });
                });

            modelBuilder.Entity("API.Model.StockTake", b =>
                {
                    b.Property<int>("stocktakeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("stocktakeID"), 1L, 1);

                    b.Property<bool?>("Added")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateDone")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuantityOrdered")
                        .HasColumnType("int");

                    b.Property<int>("QuantityReceived")
                        .HasColumnType("int");

                    b.Property<string>("wineName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("stocktakeID");

                    b.ToTable("StockTakes");
                });

            modelBuilder.Entity("API.Model.SuperUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("First_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Hire_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("ID_Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Last_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserID");

                    b.ToTable("SuperUser");
                });

            modelBuilder.Entity("API.Model.Supplier", b =>
                {
                    b.Property<int>("SupplierID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierID"), 1L, 1);

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SupplierID");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("API.Model.SupplierOrder", b =>
                {
                    b.Property<int>("SupplierOrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierOrderID"), 1L, 1);

                    b.Property<DateTime>("DateOrdered")
                        .HasColumnType("datetime2");

                    b.Property<double>("OrderTotal")
                        .HasColumnType("float");

                    b.Property<int>("Quantity_Ordered")
                        .HasColumnType("int");

                    b.Property<int>("SupplierID")
                        .HasColumnType("int");

                    b.Property<int?>("WineID")
                        .HasColumnType("int");

                    b.Property<string>("WineName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WinePrice")
                        .HasColumnType("int");

                    b.Property<string>("WineType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WineYear")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SupplierOrderID");

                    b.HasIndex("SupplierID");

                    b.HasIndex("WineID");

                    b.ToTable("SupplierOrders");
                });

            modelBuilder.Entity("API.Model.SystemPrivilege", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("SystemPrivileges");
                });

            modelBuilder.Entity("API.Model.TicketPurchase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("EventName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("QrId")
                        .HasColumnType("int");

                    b.Property<decimal>("TicketPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserEmail")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TicketPurchases");
                });

            modelBuilder.Entity("API.Model.TicketPurchasedStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("EventDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsScanned")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ScannedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ScanningToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TicketPurchaseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TicketPurchaseId")
                        .IsUnique();

                    b.ToTable("TicketPurchasedStatuses");
                });

            modelBuilder.Entity("API.Model.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("API.Model.Varietal", b =>
                {
                    b.Property<int>("VarietalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VarietalID"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("WineTypeID")
                        .HasColumnType("int");

                    b.HasKey("VarietalID");

                    b.HasIndex("WineTypeID");

                    b.ToTable("Varietals");
                });

            modelBuilder.Entity("API.Model.VAT", b =>
                {
                    b.Property<int>("VATID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VATID"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("Percentage")
                        .HasColumnType("float");

                    b.HasKey("VATID");

                    b.ToTable("VATs");
                });

            modelBuilder.Entity("API.Model.Wine", b =>
                {
                    b.Property<int>("WineID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WineID"), 1L, 1);

                    b.Property<bool>("DisplayItem")
                        .HasColumnType("bit");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("VarietalID")
                        .HasColumnType("int");

                    b.Property<string>("Vintage")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("WineTastingNote")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("WineTypeID")
                        .HasColumnType("int");

                    b.HasKey("WineID");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("VarietalID");

                    b.HasIndex("WineTypeID");

                    b.ToTable("Wines");
                });

            modelBuilder.Entity("API.Model.WinePrice", b =>
                {
                    b.Property<int>("WinePriceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WinePriceID"), 1L, 1);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("WineID")
                        .HasColumnType("int");

                    b.HasKey("WinePriceID");

                    b.HasIndex("WineID");

                    b.ToTable("WinePrice");
                });

            modelBuilder.Entity("API.Model.WineType", b =>
                {
                    b.Property<int>("WineTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WineTypeID"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("WineTypeID");

                    b.ToTable("WineTypes");
                });

            modelBuilder.Entity("API.Model.WishlistItem", b =>
                {
                    b.Property<int>("WishlistItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WishlistItemID"), 1L, 1);

                    b.Property<int>("WineID")
                        .HasColumnType("int");

                    b.Property<int>("WishlistID")
                        .HasColumnType("int");

                    b.HasKey("WishlistItemID");

                    b.HasIndex("WineID");

                    b.HasIndex("WishlistID");

                    b.ToTable("WishlistItems");
                });

            modelBuilder.Entity("API.Model.WriteOff", b =>
                {
                    b.Property<int>("WriteOffID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WriteOffID"), 1L, 1);

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("WineName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("WriteOff_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("WriteOff_Reason")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WriteOffID");

                    b.HasIndex("EmployeeId");

                    b.ToTable("WriteOffs");
                });

            modelBuilder.Entity("API.Model.WriteOff_Reason", b =>
                {
                    b.Property<int>("WriteOff_ReasonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WriteOff_ReasonID"), 1L, 1);

                    b.Property<int>("BottelsLost")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("TimesUsed")
                        .HasColumnType("int");

                    b.HasKey("WriteOff_ReasonID");

                    b.ToTable("WriteOffReasons");
                });

            modelBuilder.Entity("Cart", b =>
                {
                    b.Property<int>("CartID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartID"), 1L, 1);

                    b.Property<string>("CustomerID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("DiscountedCart")
                        .HasColumnType("float");

                    b.HasKey("CartID");

                    b.HasIndex("CustomerID")
                        .IsUnique()
                        .HasFilter("[CustomerID] IS NOT NULL");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OrderStatus", b =>
                {
                    b.Property<int>("OrderStatusId")
                        .HasColumnType("int");

                    b.Property<string>("StatusName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderStatusId");

                    b.ToTable("OrderStatuses");

                    b.HasData(
                        new
                        {
                            OrderStatusId = 1,
                            StatusName = "ClientOrderPlaced"
                        },
                        new
                        {
                            OrderStatusId = 2,
                            StatusName = "SupplierOrderPlaced"
                        },
                        new
                        {
                            OrderStatusId = 3,
                            StatusName = "Received"
                        },
                        new
                        {
                            OrderStatusId = 4,
                            StatusName = "Collected"
                        });
                });

            modelBuilder.Entity("SupplierOrderStatus", b =>
                {
                    b.Property<int>("SupplierOrderStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierOrderStatusID"), 1L, 1);

                    b.Property<bool>("Ordered")
                        .HasColumnType("bit");

                    b.Property<bool>("Paid")
                        .HasColumnType("bit");

                    b.Property<bool>("Received")
                        .HasColumnType("bit");

                    b.Property<int>("SupplierOrderID")
                        .HasColumnType("int");

                    b.HasKey("SupplierOrderStatusID");

                    b.HasIndex("SupplierOrderID")
                        .IsUnique();

                    b.ToTable("SupplierOrderStatuses");
                });

            modelBuilder.Entity("WineOrder", b =>
                {
                    b.Property<int>("WineOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WineOrderId"), 1L, 1);

                    b.Property<DateTime>("CollectedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderRefNum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("int");

                    b.Property<int>("OrderTotal")
                        .HasColumnType("int");

                    b.Property<bool>("isRefunded")
                        .HasColumnType("bit");

                    b.HasKey("WineOrderId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderStatusId");

                    b.ToTable("WineOrders");
                });

            modelBuilder.Entity("WineOrderItem", b =>
                {
                    b.Property<int>("WineOrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WineOrderItemId"), 1L, 1);

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("WineId")
                        .HasColumnType("int");

                    b.HasKey("WineOrderItemId");

                    b.HasIndex("OrderId");

                    b.HasIndex("WineId");

                    b.ToTable("WineOrderItem");
                });

            modelBuilder.Entity("Wishlist", b =>
                {
                    b.Property<int>("WishlistID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WishlistID"), 1L, 1);

                    b.Property<string>("CustomerID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("WishlistID");

                    b.HasIndex("CustomerID")
                        .IsUnique()
                        .HasFilter("[CustomerID] IS NOT NULL");

                    b.ToTable("Wishlists");
                });

            modelBuilder.Entity("API.Model.CartItem", b =>
                {
                    b.HasOne("Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Model.Wine", "Wine")
                        .WithMany("CartItems")
                        .HasForeignKey("WineID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Wine");
                });

            modelBuilder.Entity("API.Model.Customer", b =>
                {
                    b.HasOne("API.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Model.Employee", b =>
                {
                    b.HasOne("API.Model.SuperUser", "SuperUser")
                        .WithMany("Employees")
                        .HasForeignKey("SuperUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SuperUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Model.Event", b =>
                {
                    b.HasOne("API.Model.EarlyBird", "EarlyBird")
                        .WithMany("Events")
                        .HasForeignKey("EarlyBirdID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Model.Employee", null)
                        .WithMany("Events")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("API.Model.EventType", "EventType")
                        .WithMany("Events")
                        .HasForeignKey("EventTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("EarlyBird");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("API.Model.EventPrice", b =>
                {
                    b.HasOne("API.Model.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventID");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("API.Model.Inventory", b =>
                {
                    b.HasOne("API.Model.Varietal", "Varietal")
                        .WithMany()
                        .HasForeignKey("VarietalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Model.Wine", "Wine")
                        .WithMany("Inventories")
                        .HasForeignKey("WineID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Model.WineType", "WineType")
                        .WithMany()
                        .HasForeignKey("WineTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Varietal");

                    b.Navigation("Wine");

                    b.Navigation("WineType");
                });

            modelBuilder.Entity("API.Model.MethodPrivilegeMapping", b =>
                {
                    b.HasOne("API.Model.SystemPrivilege", "SystemPrivilege")
                        .WithMany()
                        .HasForeignKey("SystemPrivilegeId");

                    b.Navigation("SystemPrivilege");
                });

            modelBuilder.Entity("API.Model.QrCode", b =>
                {
                    b.HasOne("API.Model.TicketPurchase", "TicketPurchase")
                        .WithOne("QrCode")
                        .HasForeignKey("API.Model.QrCode", "TicketPurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TicketPurchase");
                });

            modelBuilder.Entity("API.Model.RefundItem", b =>
                {
                    b.HasOne("API.Model.RefundRequest", "RefundRequest")
                        .WithMany("RefundItems")
                        .HasForeignKey("RefundRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Model.RefundResponse", "RefundResponse")
                        .WithMany()
                        .HasForeignKey("RefundResponseID");

                    b.HasOne("WineOrderItem", "WineOrderItem")
                        .WithMany()
                        .HasForeignKey("WineOrderItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RefundRequest");

                    b.Navigation("RefundResponse");

                    b.Navigation("WineOrderItem");
                });

            modelBuilder.Entity("API.Model.RefundRequest", b =>
                {
                    b.HasOne("WineOrder", "WineOrder")
                        .WithMany("RefundRequests")
                        .HasForeignKey("WineOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WineOrder");
                });

            modelBuilder.Entity("API.Model.SuperUser", b =>
                {
                    b.HasOne("API.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Model.SupplierOrder", b =>
                {
                    b.HasOne("API.Model.Supplier", "Supplier")
                        .WithMany("SupplierOrders")
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Model.Wine", null)
                        .WithMany("SupplierOrders")
                        .HasForeignKey("WineID");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("API.Model.TicketPurchasedStatus", b =>
                {
                    b.HasOne("API.Model.TicketPurchase", "TicketPurchase")
                        .WithOne("TicketPurchasedStatus")
                        .HasForeignKey("API.Model.TicketPurchasedStatus", "TicketPurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TicketPurchase");
                });

            modelBuilder.Entity("API.Model.Varietal", b =>
                {
                    b.HasOne("API.Model.WineType", "WineType")
                        .WithMany("Varietals")
                        .HasForeignKey("WineTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("WineType");
                });

            modelBuilder.Entity("API.Model.Wine", b =>
                {
                    b.HasOne("API.Model.Employee", null)
                        .WithMany("Wines")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("API.Model.Varietal", "Varietal")
                        .WithMany("Wines")
                        .HasForeignKey("VarietalID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Model.WineType", "WineType")
                        .WithMany("Wines")
                        .HasForeignKey("WineTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Varietal");

                    b.Navigation("WineType");
                });

            modelBuilder.Entity("API.Model.WinePrice", b =>
                {
                    b.HasOne("API.Model.Wine", "Wine")
                        .WithMany()
                        .HasForeignKey("WineID");

                    b.Navigation("Wine");
                });

            modelBuilder.Entity("API.Model.WishlistItem", b =>
                {
                    b.HasOne("API.Model.Wine", "Wine")
                        .WithMany("WishlistItems")
                        .HasForeignKey("WineID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wishlist", "Wishlist")
                        .WithMany("WishlistItems")
                        .HasForeignKey("WishlistID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wine");

                    b.Navigation("Wishlist");
                });

            modelBuilder.Entity("API.Model.WriteOff", b =>
                {
                    b.HasOne("API.Model.Employee", null)
                        .WithMany("WriteOffs")
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("Cart", b =>
                {
                    b.HasOne("API.Model.Customer", "Customer")
                        .WithOne("Cart")
                        .HasForeignKey("Cart", "CustomerID");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("API.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("API.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("API.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SupplierOrderStatus", b =>
                {
                    b.HasOne("API.Model.SupplierOrder", "SupplierOrder")
                        .WithOne("SupplierOrderStatus")
                        .HasForeignKey("SupplierOrderStatus", "SupplierOrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SupplierOrder");
                });

            modelBuilder.Entity("WineOrder", b =>
                {
                    b.HasOne("API.Model.Customer", "Customer")
                        .WithMany("WineOrders")
                        .HasForeignKey("CustomerId");

                    b.HasOne("OrderStatus", "OrderStatus")
                        .WithMany("WineOrders")
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("OrderStatus");
                });

            modelBuilder.Entity("WineOrderItem", b =>
                {
                    b.HasOne("WineOrder", "WineOrder")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Model.Wine", "Wine")
                        .WithMany()
                        .HasForeignKey("WineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wine");

                    b.Navigation("WineOrder");
                });

            modelBuilder.Entity("Wishlist", b =>
                {
                    b.HasOne("API.Model.Customer", "Customer")
                        .WithOne("Wishlist")
                        .HasForeignKey("Wishlist", "CustomerID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("API.Model.Customer", b =>
                {
                    b.Navigation("Cart");

                    b.Navigation("WineOrders");

                    b.Navigation("Wishlist");
                });

            modelBuilder.Entity("API.Model.EarlyBird", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("API.Model.Employee", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Wines");

                    b.Navigation("WriteOffs");
                });

            modelBuilder.Entity("API.Model.EventType", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("API.Model.RefundRequest", b =>
                {
                    b.Navigation("RefundItems");
                });

            modelBuilder.Entity("API.Model.SuperUser", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("API.Model.Supplier", b =>
                {
                    b.Navigation("SupplierOrders");
                });

            modelBuilder.Entity("API.Model.SupplierOrder", b =>
                {
                    b.Navigation("SupplierOrderStatus");
                });

            modelBuilder.Entity("API.Model.TicketPurchase", b =>
                {
                    b.Navigation("QrCode");

                    b.Navigation("TicketPurchasedStatus");
                });

            modelBuilder.Entity("API.Model.Varietal", b =>
                {
                    b.Navigation("Wines");
                });

            modelBuilder.Entity("API.Model.Wine", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Inventories");

                    b.Navigation("SupplierOrders");

                    b.Navigation("WishlistItems");
                });

            modelBuilder.Entity("API.Model.WineType", b =>
                {
                    b.Navigation("Varietals");

                    b.Navigation("Wines");
                });

            modelBuilder.Entity("Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("OrderStatus", b =>
                {
                    b.Navigation("WineOrders");
                });

            modelBuilder.Entity("WineOrder", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("RefundRequests");
                });

            modelBuilder.Entity("Wishlist", b =>
                {
                    b.Navigation("WishlistItems");
                });
#pragma warning restore 612, 618
        }
    }
}
